//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/ALInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ALInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ALInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ALInput"",
    ""maps"": [
        {
            ""name"": ""CameraMap"",
            ""id"": ""6165e99c-5bf6-4294-995a-c29ad75e5fc1"",
            ""actions"": [
                {
                    ""name"": ""CameraWheel"",
                    ""type"": ""Value"",
                    ""id"": ""2eb49657-c886-4d7c-b54f-1d3e8087072b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraMovement"",
                    ""type"": ""Value"",
                    ""id"": ""3901c95f-a47e-4334-b96c-e11ddc6ff3c1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""561fd7d1-cdc4-4c90-a0cd-dc931bb8fc2a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""668d632b-8016-499c-babe-b1e5b58bbad2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3aacdaf1-573f-4cf2-9431-5bb1005e8561"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""67f10c67-1610-42e0-8fec-0226fa9a67d0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""34db17ae-5641-4def-b1f4-018848ba5f67"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5dffa073-cfd9-40ff-81e2-e99e251c3f2f"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""FurnitureInteractionMap"",
            ""id"": ""986ca2c9-1178-40c2-9636-36b7aee6894b"",
            ""actions"": [
                {
                    ""name"": ""MoveFurniture"",
                    ""type"": ""Button"",
                    ""id"": ""3e166299-4983-42a9-a89c-203c4ecadd3e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""589bcef2-52f4-420c-8b48-9e293063b7ae"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveFurniture"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""ALControlScheme"",
            ""bindingGroup"": ""ALControlScheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // CameraMap
        m_CameraMap = asset.FindActionMap("CameraMap", throwIfNotFound: true);
        m_CameraMap_CameraWheel = m_CameraMap.FindAction("CameraWheel", throwIfNotFound: true);
        m_CameraMap_CameraMovement = m_CameraMap.FindAction("CameraMovement", throwIfNotFound: true);
        // FurnitureInteractionMap
        m_FurnitureInteractionMap = asset.FindActionMap("FurnitureInteractionMap", throwIfNotFound: true);
        m_FurnitureInteractionMap_MoveFurniture = m_FurnitureInteractionMap.FindAction("MoveFurniture", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CameraMap
    private readonly InputActionMap m_CameraMap;
    private List<ICameraMapActions> m_CameraMapActionsCallbackInterfaces = new List<ICameraMapActions>();
    private readonly InputAction m_CameraMap_CameraWheel;
    private readonly InputAction m_CameraMap_CameraMovement;
    public struct CameraMapActions
    {
        private @ALInput m_Wrapper;
        public CameraMapActions(@ALInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @CameraWheel => m_Wrapper.m_CameraMap_CameraWheel;
        public InputAction @CameraMovement => m_Wrapper.m_CameraMap_CameraMovement;
        public InputActionMap Get() { return m_Wrapper.m_CameraMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraMapActions set) { return set.Get(); }
        public void AddCallbacks(ICameraMapActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraMapActionsCallbackInterfaces.Add(instance);
            @CameraWheel.started += instance.OnCameraWheel;
            @CameraWheel.performed += instance.OnCameraWheel;
            @CameraWheel.canceled += instance.OnCameraWheel;
            @CameraMovement.started += instance.OnCameraMovement;
            @CameraMovement.performed += instance.OnCameraMovement;
            @CameraMovement.canceled += instance.OnCameraMovement;
        }

        private void UnregisterCallbacks(ICameraMapActions instance)
        {
            @CameraWheel.started -= instance.OnCameraWheel;
            @CameraWheel.performed -= instance.OnCameraWheel;
            @CameraWheel.canceled -= instance.OnCameraWheel;
            @CameraMovement.started -= instance.OnCameraMovement;
            @CameraMovement.performed -= instance.OnCameraMovement;
            @CameraMovement.canceled -= instance.OnCameraMovement;
        }

        public void RemoveCallbacks(ICameraMapActions instance)
        {
            if (m_Wrapper.m_CameraMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraMapActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraMapActions @CameraMap => new CameraMapActions(this);

    // FurnitureInteractionMap
    private readonly InputActionMap m_FurnitureInteractionMap;
    private List<IFurnitureInteractionMapActions> m_FurnitureInteractionMapActionsCallbackInterfaces = new List<IFurnitureInteractionMapActions>();
    private readonly InputAction m_FurnitureInteractionMap_MoveFurniture;
    public struct FurnitureInteractionMapActions
    {
        private @ALInput m_Wrapper;
        public FurnitureInteractionMapActions(@ALInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveFurniture => m_Wrapper.m_FurnitureInteractionMap_MoveFurniture;
        public InputActionMap Get() { return m_Wrapper.m_FurnitureInteractionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FurnitureInteractionMapActions set) { return set.Get(); }
        public void AddCallbacks(IFurnitureInteractionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_FurnitureInteractionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FurnitureInteractionMapActionsCallbackInterfaces.Add(instance);
            @MoveFurniture.started += instance.OnMoveFurniture;
            @MoveFurniture.performed += instance.OnMoveFurniture;
            @MoveFurniture.canceled += instance.OnMoveFurniture;
        }

        private void UnregisterCallbacks(IFurnitureInteractionMapActions instance)
        {
            @MoveFurniture.started -= instance.OnMoveFurniture;
            @MoveFurniture.performed -= instance.OnMoveFurniture;
            @MoveFurniture.canceled -= instance.OnMoveFurniture;
        }

        public void RemoveCallbacks(IFurnitureInteractionMapActions instance)
        {
            if (m_Wrapper.m_FurnitureInteractionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFurnitureInteractionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_FurnitureInteractionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FurnitureInteractionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FurnitureInteractionMapActions @FurnitureInteractionMap => new FurnitureInteractionMapActions(this);
    private int m_ALControlSchemeSchemeIndex = -1;
    public InputControlScheme ALControlSchemeScheme
    {
        get
        {
            if (m_ALControlSchemeSchemeIndex == -1) m_ALControlSchemeSchemeIndex = asset.FindControlSchemeIndex("ALControlScheme");
            return asset.controlSchemes[m_ALControlSchemeSchemeIndex];
        }
    }
    public interface ICameraMapActions
    {
        void OnCameraWheel(InputAction.CallbackContext context);
        void OnCameraMovement(InputAction.CallbackContext context);
    }
    public interface IFurnitureInteractionMapActions
    {
        void OnMoveFurniture(InputAction.CallbackContext context);
    }
}
